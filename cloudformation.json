{
  "Parameters" : {
    "VPCID" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VPC to use"
    },
    "JenkinsPublicSubnet" : {
      "Type" : "AWS::EC2::Subnet::Id",
      "Description" : "Public Subnet for the cluster"
    },
    "Region" : {
      "Type" : "string",
      "Default" : "eu-central-1",
      "Description" : "Pick a region"
    },
    "AvailabilityZone" : {
      "Type" : "AWS::EC2::AvailabilityZone::Name",
      "Default" : "eu-central-1b",
      "Description" : "Pick an availability zone"
    },
    "SnapshotId" : {
      "Type" : "String",
      "Description" : "EBS snapshot that contains the Jenkins master data"
    },
    "MasterInstanceType" : {
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : ["t2.medium", "m4.large", "m4.xlarge", "m4.2xlarge"],
      "Description" : "Instance type to use for the Jenkins master"
    },
    "MasterInstanceAMI" : {
      "Type" : "AWS::EC2::Image::Id",
      "Description" : "AMI to use for the Jenkins master"
    },
    "JenkinsMasterKeyName" : {
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Description" : "Key name of the jenkins master node."
    },
    "JenkinsMasterRootSize" : {
      "Type" : "String",
      "Description" : "Size of the root disk for the Jenkins Master",
      "Default": "20"
    },
    "WhiteListedCIDR" : {
      "Type" : "String",
      "Description" : "Network allowed to access Jenkins",
      "Default": "0.0.0.0/0"
    },
    "SnapshotsMaxAge" : {
      "Type" : "String",
      "Description" : "How many days to keep snaphots for",
      "Default": "7"
    }
  },
  "Resources": {
    "JenkinsSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
         "GroupDescription" : "Security group for jenkins cluster",
         "VpcId" : {"Ref": "VPCID"}
      }
    },
    "JenkinsInterconnect": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {"Ref": "JenkinsSecurityGroup"},
        "GroupId": {"Ref": "JenkinsSecurityGroup"},
        "IpProtocol": "tcp",
        "FromPort": "1",
        "ToPort": "65534"
      },
      "DependsOn": ["JenkinsSecurityGroup"]
    },
    "JenkinsLBSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
         "GroupDescription" : "Security group for jenkins lb",
         "SecurityGroupIngress" : [{
           "CidrIp" : {"Ref": "WhiteListedCIDR"},
           "IpProtocol" : "tcp",
           "FromPort" : 80,
           "ToPort" : 80
         }],
         "VpcId" : {"Ref": "VPCID"}
      }
    },
    "JenkinsLBToMasterIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {"Ref": "JenkinsLBSecurityGroup"},
        "GroupId": {"Ref": "JenkinsSecurityGroup"},
        "IpProtocol": "tcp",
        "FromPort": "8080",
        "ToPort": "8080"
      },
      "DependsOn": ["JenkinsSecurityGroup", "JenkinsLBSecurityGroup"]
    },
    "JenkinsLB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Instances" : [{"Ref": "JenkinsMaster"}],
        "Listeners" : [{
            "LoadBalancerPort" : "80",
            "Protocol" : "HTTP",
            "InstancePort" : "8080",
            "InstanceProtocol": "HTTP"
        }],
        "Subnets": [{"Ref": "JenkinsPublicSubnet"}],
        "SecurityGroups" : [{"Ref": "JenkinsLBSecurityGroup"}],
        "Scheme": "internet-facing"
      },
      "DependsOn" : ["JenkinsMaster"]
    },
    "JenkinsEBS": {
       "Type":"AWS::EC2::Volume",
       "Properties" : {
         "AvailabilityZone" : {"Ref": "AvailabilityZone"},
         "Encrypted" : false,
         "SnapshotId" : { "Ref" : "SnapshotId" },
         "VolumeType" : "standard"
       },
      "DeletionPolicy" : "Snapshot"
    },
    "JenkinsMasterIAMRole": {
      "Type": "AWS::IAM::Role",
      "DependsOn": "SlaveInstanceProfile",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "jenkinsmasterpolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:createKeyPair",
                    "ec2:CreateSnapshot",
                    "ec2:DescribeAvailabilityZones",
                    "ec2:DescribeImages",
                    "ec2:DescribeInstances",
                    "ec2:DescribeSnapshots",
                    "ec2:DescribeTags",
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeRegions",
                    "ec2:DescribeSecuritygroups",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSpotInstanceRequests",
                    "ec2:DescribeVolumeAttribute",
                    "ec2:DescribeVolumeStatus",
                    "ec2:DescribeVolumes"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags"
                  ],
                  "Resource": "*"
                },
                {
                 "Effect":"Allow",
                 "Action":"iam:PassRole",
                 "Resource":  {"Fn::GetAtt": ["JenkinsSlaveRole", "Arn"]}
                },
                {
                  "Effect": "Allow",
                  "Action": [
                     "ec2:RunInstances"
                  ],
                  "Resource": [
                    "arn:aws:ec2:*::image/ami-*",
                    { "Fn::Join" : [ "", [ "arn:aws:ec2:*:", {"Ref": "AWS::AccountId"}, ":instance/*"]]},
                    { "Fn::Join" : [ "", [ "arn:aws:ec2:*:", {"Ref": "AWS::AccountId"}, ":subnet/*"]]},
                    { "Fn::Join" : [ "", [ "arn:aws:ec2:*:", {"Ref": "AWS::AccountId"}, ":network-interface/*"]]},
                    { "Fn::Join" : [ "", [ "arn:aws:ec2:*:", {"Ref": "AWS::AccountId"}, ":volume/*"]]},
                    { "Fn::Join" : [ "", [ "arn:aws:ec2:*:", {"Ref": "AWS::AccountId"}, ":key-pair/*"]]},
                    { "Fn::Join" : [ "", [ "arn:aws:ec2:*:", {"Ref": "AWS::AccountId"}, ":security-group/*"]]}
                  ]
                },{
                  "Effect": "Allow",
                  "Action": [
                    "ec2:TerminateInstances",
                    "ec2:StopInstances",
                    "ec2:StartInstances"
                   ],
                  "Resource": [
                    { "Fn::Join" : [ "", [ "arn:aws:ec2:*:", {"Ref": "AWS::AccountId"},":instance/*"]]}
                  ],
                  "Condition": {
                    "StringEquals": {
                      "ec2:InstanceProfile": {"Fn::GetAtt": ["SlaveInstanceProfile", "Arn"]}
                    }
                  }
                }
              ]
            }
          }
        ]
      }
    },
   "JenkinsMasterProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "JenkinsMasterIAMRole"
          }
        ]
      },
      "DependsOn" : ["JenkinsMasterIAMRole"]
    },
    "JenkinsMaster": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone" : {"Ref": "AvailabilityZone"},
        "BlockDeviceMappings" : [{
          "DeviceName": "/dev/sda1",
          "Ebs": { "VolumeSize" : {"Ref": "JenkinsMasterRootSize"}}
        }],
        "EbsOptimized" : false,
        "IamInstanceProfile": {"Ref": "JenkinsMasterProfile"},
        "ImageId" : {"Ref": "MasterInstanceAMI" },
        "InstanceType" : {"Ref": "MasterInstanceType"},
        "KeyName" : {"Ref": "JenkinsMasterKeyName"},
        "Monitoring" : false,
        "SecurityGroupIds" : [{"Ref": "JenkinsSecurityGroup"}],
        "SubnetId": {"Ref": "JenkinsPublicSubnet"},
        "Volumes" : [{ "VolumeId" : { "Ref" : "JenkinsEBS" }, "Device" : "/dev/xvdd" } ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [
          "#cloud-config\n",
          "mounts:\n",
          " - [ \"/dev/xvdd\", \"/var/lib/jenkins\", \"ext4\", \"defaults\", \"0\", \"0\" ]\n",
          "runcmd:\n",
          " - [ \"chown\", \"jenkins:jenkins\", \"/var/lib/jenkins\" ]\n",
          " - [ \"chown\", \"jenkins:jenkins\", \"/var/lib/jenkins\" ]\n",
          { "Fn::Join" : [ "", [" - echo VOLUMEID=", { "Ref": "JenkinsEBS" }, ">/etc/ebs-snapshot.cfg\n"]]},
          { "Fn::Join" : [ "", [" - echo CLUSTER=", { "Ref": "AWS::StackName" }, ">>/etc/ebs-snapshot.cfg\n"]]}
        ]]}}
      },
      "DependsOn" : ["JenkinsSecurityGroup", "JenkinsMasterProfile"]
    },
    "RecoverJenkinsMasterAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Recover Jenkins Master when underlying hardware fails",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "5",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": { "Fn::Join" : [ "", ["arn:aws:automate:", { "Ref": "Region" }, ":ec2:recover"]]},
        "Dimensions": [{
          "Name": "InstanceId",
          "Value": {"Ref": "JenkinsMaster"}
        }]
      },
      "DependsOn" : ["JenkinsMaster"]
    },
    "JenkinsSlaveRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [{
            "PolicyName": "ecr-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
   "SlaveInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "JenkinsSlaveRole"
          }
        ]
      },
      "DependsOn" : ["JenkinsSlaveRole"]
    },
    "SnapshotCleanerLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "SnapshotCleanerLambdaPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                 "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeAvailabilityZones",
                    "ec2:DescribeTags",
                    "ec2:DescribeRegions",
                    "ec2:DescribeSnapshots",
                    "ec2:DeleteSnapshot"
                  ],
                 "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "SnapshotCleanerLambda": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Code": {
            "ZipFile": {
              "Fn::Join" : ["\n", [
                "import boto3",
                "import datetime",
                "def lambda_handler(event, context):",
                "    ec2 = boto3.resource('ec2')",
                "    jenkins_snapshots = ec2.snapshots.filter(",
                "        Filters=[{'Name': 'tag:cluster', 'Values': [",
                { "Fn::Join": ["", ["'*", {"Ref": "AWS::StackName"}, "*'"]]},
                "]}]",
                "    )",
                "    for snapshot in jenkins_snapshots:",
                "      now = datetime.datetime.utcnow()",
                { "Fn::Join": ["", ["      if (now - snapshot.start_time.replace(tzinfo=None) > datetime.timedelta(days = ", {"Ref": "SnapshotsMaxAge"}, ")):"]]},
                "        ec2.delete_snapshot(snapshot.id)",
                "    return 0"]]}},
          "Description": "Clean up old jenkins snapshots",
          "Handler": "index.lambda_handler",
          "Role": {"Fn::GetAtt" : [ "SnapshotCleanerLambdaRole" , "Arn" ]},
          "Runtime": "python2.7",
          "Timeout": "10"
      },
      "DependsOn" : ["JenkinsSlaveRole"]
    },
    "ScheduleSnapshotCleanupDaily": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": { "Fn::Join": ["", ["Schedule cleanup of old EBS snapshots for ", {"Ref": "AWS::StackName"}, " Jenkins"]]},
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["SnapshotCleanerLambda", "Arn"] },
          "Id": { "Fn::Join": ["", ["schedule-", {"Ref": "AWS::StackName"}, "-snapshots-cleaning"]]}
        }]
      },
      "DependsOn" : ["SnapshotCleanerLambda"]
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "SnapshotCleanerLambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["ScheduleSnapshotCleanupDaily", "Arn"]}
      },
      "DependsOn" : ["ScheduleSnapshotCleanupDaily"]
    }
  },
  "Outputs" : {
    "JenkinsMasterIP" : {
      "Description" : "Jenkins Master IP",
      "Value" : {"Fn::GetAtt" : [ "JenkinsMaster" , "PublicIp" ]}
    },
    "SlaveProfile" : {
      "Description" : "Slave instance IAM profile",
      "Value" : {"Fn::GetAtt" : [ "SlaveInstanceProfile" , "Arn" ]}
    }
  }
}
